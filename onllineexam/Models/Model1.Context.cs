//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace onllineexam.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OnlineExamEntities : DbContext
    {
        public OnlineExamEntities()
            : base("name=OnlineExamEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<QuestionData> QuestionDatas { get; set; }
        public virtual DbSet<QuestionFile> QuestionFiles { get; set; }
        public virtual DbSet<Result> Results { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<TestAccessor> TestAccessors { get; set; }
        public virtual DbSet<TestGenerator> TestGenerators { get; set; }
    
        public virtual ObjectResult<Nullable<int>> NumOfQuest(Nullable<int> testid)
        {
            var testidParameter = testid.HasValue ?
                new ObjectParameter("testid", testid) :
                new ObjectParameter("testid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("NumOfQuest", testidParameter);
        }
    
        public virtual ObjectResult<string> CheckLevel(Nullable<int> testid)
        {
            var testidParameter = testid.HasValue ?
                new ObjectParameter("testid", testid) :
                new ObjectParameter("testid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CheckLevel", testidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> NumOfQuestByLevel(Nullable<int> testid, Nullable<int> level)
        {
            var testidParameter = testid.HasValue ?
                new ObjectParameter("testid", testid) :
                new ObjectParameter("testid", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("NumOfQuestByLevel", testidParameter, levelParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Result_By_stu_and_sub_Result> Result_By_stu_and_sub(Nullable<int> stu_id, Nullable<int> subid)
        {
            var stu_idParameter = stu_id.HasValue ?
                new ObjectParameter("Stu_id", stu_id) :
                new ObjectParameter("Stu_id", typeof(int));
    
            var subidParameter = subid.HasValue ?
                new ObjectParameter("subid", subid) :
                new ObjectParameter("subid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Result_By_stu_and_sub_Result>("Result_By_stu_and_sub", stu_idParameter, subidParameter);
        }
    
        public virtual ObjectResult<Result_By_stu_and_test_Result> Result_By_stu_and_test(Nullable<int> sid, Nullable<int> testid)
        {
            var sidParameter = sid.HasValue ?
                new ObjectParameter("Sid", sid) :
                new ObjectParameter("Sid", typeof(int));
    
            var testidParameter = testid.HasValue ?
                new ObjectParameter("testid", testid) :
                new ObjectParameter("testid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Result_By_stu_and_test_Result>("Result_By_stu_and_test", sidParameter, testidParameter);
        }
    
        public virtual ObjectResult<Result_By_subject_Result> Result_By_subject(Nullable<int> subid)
        {
            var subidParameter = subid.HasValue ?
                new ObjectParameter("subid", subid) :
                new ObjectParameter("subid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Result_By_subject_Result>("Result_By_subject", subidParameter);
        }
    
        public virtual ObjectResult<Result_By_Test_Result> Result_By_Test(Nullable<int> testid)
        {
            var testidParameter = testid.HasValue ?
                new ObjectParameter("testid", testid) :
                new ObjectParameter("testid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Result_By_Test_Result>("Result_By_Test", testidParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int InsertScore1(Nullable<int> stud, Nullable<int> sub, Nullable<int> test, Nullable<int> score)
        {
            var studParameter = stud.HasValue ?
                new ObjectParameter("stud", stud) :
                new ObjectParameter("stud", typeof(int));
    
            var subParameter = sub.HasValue ?
                new ObjectParameter("sub", sub) :
                new ObjectParameter("sub", typeof(int));
    
            var testParameter = test.HasValue ?
                new ObjectParameter("test", test) :
                new ObjectParameter("test", typeof(int));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("score", score) :
                new ObjectParameter("score", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertScore1", studParameter, subParameter, testParameter, scoreParameter);
        }
    
        public virtual int InsertScore2(Nullable<int> res, Nullable<int> score)
        {
            var resParameter = res.HasValue ?
                new ObjectParameter("res", res) :
                new ObjectParameter("res", typeof(int));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("score", score) :
                new ObjectParameter("score", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertScore2", resParameter, scoreParameter);
        }
    
        public virtual int InsertScore3(Nullable<int> res, Nullable<int> score)
        {
            var resParameter = res.HasValue ?
                new ObjectParameter("res", res) :
                new ObjectParameter("res", typeof(int));
    
            var scoreParameter = score.HasValue ?
                new ObjectParameter("score", score) :
                new ObjectParameter("score", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertScore3", resParameter, scoreParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> MaximumQuestnNumINLevel(Nullable<int> testid, Nullable<int> level)
        {
            var testidParameter = testid.HasValue ?
                new ObjectParameter("testid", testid) :
                new ObjectParameter("testid", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("MaximumQuestnNumINLevel", testidParameter, levelParameter);
        }
    }
}
