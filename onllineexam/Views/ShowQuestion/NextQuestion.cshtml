@model onllineexam.Models.QuestionData

@{
    ViewBag.Title = "Rapid Test";
}
<br>
<h1></h1>

<div id="clockdiv">
    <h1 style="color: red">
        <div class="minutes" style="float: left"> </div>
        <p style="float: left">:</p>
        <div class="seconds"></div>
    </h1>
</div>

<script>
    function getTimeRemaining(endtime) {
        var t = Date.parse(endtime) - Date.parse(new Date());
        var seconds = Math.floor((t / 1000) % 60);
        var minutes = Math.floor((t / 1000 / 60) % 1);

        return {
            'total': t,
            'minutes': minutes,
            'seconds': seconds
        };
    }

    function initializeClock(id, endtime) {
        var clock = document.getElementById(id);

        var minutesSpan = clock.querySelector('.minutes');
        var secondsSpan = clock.querySelector('.seconds');

        function updateClock() {
            var t = getTimeRemaining(endtime);


            minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
            secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);

            if (t.total <= 0) {
                clearInterval(timeinterval);


            }
        }

        updateClock();
        var timeinterval = setInterval(updateClock, 1000);
    }

    var deadline = new Date(Date.parse(new Date()) + 60 * 60 * 1000);
    initializeClock('clockdiv', deadline);

    // ...................................
    var _second = 1000;
    var _minute = _second * 60;
    var _hour = _minute * 60;
    var _day = _hour * 24;
    var timer;
    var end = new Date().getTime() + (60 * _second);
    //

    function showRemaining() {
        var now = new Date();
        var distance = end - now;
        if (distance < 0) {

            clearInterval(timer);
            document.getElementById('countdown').innerHTML = 'EXPIRED!';

            return;
        }
        var days = Math.floor(distance / _day);
        var hours = Math.floor((distance % _day) / _hour);
        var minutes = Math.floor((distance % _hour) / _minute);
        var seconds = Math.floor((distance % _minute) / _second);

        document.getElementById('countdown').innerHTML = days + 'days ';
        document.getElementById('countdown').innerHTML += hours + 'hrs ';
        document.getElementById('countdown').innerHTML += minutes + 'mins ';
        document.getElementById('countdown').innerHTML += seconds + 'secs';
    }

    timer = setInterval(showRemaining, 000);</script>

<div>
    @using (Html.BeginForm("NextQuestion", "ShowQuestion", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
    <div>
        @Html.ValidationMessageFor(m => m.selectedvalue, "", new { @class = "text-danger" })
        @Session["message"]
        <hr />
        <dl class="dl-horizontal">
            <b>
                <dd>
                    @Html.LabelFor(model => model.Level, "Level")
                    @Html.DisplayFor(model => model.Level)
                </dd>
            </b>
            <dt>
                @ViewBag.questionNo

            </dt>
            <dd>
                @Html.DisplayFor(model => model.Question)
            </dd>
            <dt>
                @Html.RadioButtonFor(model => model.selectedvalue, "1")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.option1)
            </dd>
            <dt>
                @Html.RadioButtonFor(model => model.selectedvalue, "2")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.option2)
            </dd>
            <dt>
                @Html.RadioButtonFor(model => model.selectedvalue, "3")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.option3)
            </dd>
            <dt>
                @Html.RadioButtonFor(model => model.selectedvalue, "4")
            </dt>
            <dd>
                @Html.DisplayFor(model => model.option4)
            </dd>
            @Html.HiddenFor(m => m.option1)
            @Html.HiddenFor(m => m.option2)
            @Html.HiddenFor(m => m.option3)
            @Html.HiddenFor(m => m.option4)
            @Html.HiddenFor(m => m.Question_number)
            @Html.HiddenFor(m => m.Question)
            @Html.HiddenFor(m => m.testid)
            @Html.HiddenFor(m => m.correct_option)
            @Html.HiddenFor(m => m.Level)
        </dl>
    </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="NEXT" class="btn btn-danger" />
            </div>
        </div>


    }
</div>

